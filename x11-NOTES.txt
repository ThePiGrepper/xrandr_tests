//compiler flags:
XRANDR_LIBS = -lm -lXrandr -lXrender -lX11 

/* Structure */
Display * dpy = XOpenDisplay(NULL);
Window root = DefaultRootWindow(dpy);

XRRScreenResources * res = XRRGetScreenResourcesCurrent(dpy, root);
typedef struct _XRRScreenResources {
    Time	timestamp;
    Time	configTimestamp;
    int		ncrtc;
    RRCrtc	*crtcs; //number and list of crtc associated with the screen.
    int		noutput;
    RROutput	*outputs; //number and list of output associated with the screen.
    int		nmode;
    XRRModeInfo	*modes; //number and list of modes associated with the screen.
} XRRScreenResources;

XRROutputInfo *XRRGetOutputInfo (Display *dpy, XRRScreenResources *resources, RROutput output);
typedef struct _XRROutputInfo {
    Time	    timestamp;
    RRCrtc	    crtc; //Current source CRTC for video data.(or disabled(0?))
    char	    *name; //name of output
    int		    nameLen;
    unsigned long   mm_width;
    unsigned long   mm_height;
    Connection	    connection; //0:connected, 1:disconnected, 2:unknown
    SubpixelOrder   subpixel_order;
    int		    ncrtc;
    RRCrtc	    *crtcs; //list of CRTCs that the output may be connected to.
    int		    nclone;
    RROutput	    *clones; //list of outputs which may be connected to the same CRTC along with this output.
    int		    nmode;
    int		    npreferred; //first npreferred modes in list are preferred by the monitor.(for fixed-pixel devices,they match resolution.
    RRMode	    *modes; //list of modes supported by this output.
} XRROutputInfo;

XRRCrtcInfo *XRRGetCrtcInfo (Display *dpy, XRRScreenResources *resources, RRCrtc crtc);
typedef struct _XRRCrtcInfo {
    Time	    timestamp;
    int		    x, y;
    unsigned int    width, height;
    RRMode	    mode; //indicates which mode is active, or None if CRTC is disabled.
    Rotation	    rotation;
    int		    noutput;
    RROutput	    *outputs; //set of outputs currently connected to the CRTC.
    Rotation	    rotations;
    int		    npossible;
    RROutput	    *possible; //list all of the outputs which may be connected to this CRTC.
} XRRCrtcInfo;

typedef struct _XRRModeInfo {
    RRMode		id;
    unsigned int	width;
    unsigned int	height;
    unsigned long	dotClock;
    unsigned int	hSyncStart;
    unsigned int	hSyncEnd;
    unsigned int	hTotal;
    unsigned int	hSkew;
    unsigned int	vSyncStart;
    unsigned int	vSyncEnd;
    unsigned int	vTotal;
    char		*name;
    unsigned int	nameLength;
    XRRModeFlags	modeFlags;
} XRRModeInfo;
